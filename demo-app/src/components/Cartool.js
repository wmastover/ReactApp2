import React, {useState, useCallback,}from "react";
import { Form } from "./Form";
import { CarTable } from "./CarTable";
import { ToolHeader } from "./ToolHeader";
import { useDefaultInputFocus } from "../hooks/useDefaultInputFocus";

export const Cartool = ({cars: carList, initialState}) => {
    
    
    
    //set state for table data
    const [cars, setCars] = useState(carList.concat())
    const [editCarId, setEditCarID] = useState(-1)

    const  defaultInputRef = useDefaultInputFocus()

    const init = () => {

        setEditCarID(-1)
        if (defaultInputRef.current) {
            defaultInputRef.current.focus()
        }

    }

    const addCar = useCallback((car) => {
        setCars(
            // concatinates cars (imported list) with cardata  (form) + id, id is generated by
            // finding the largest current id accross all cars and adding 1

            cars.concat({...car,
            id: Math.max(...cars.map(c => c.id)) + 1,}),
        )
        console.log(cars)
        
    },[cars])

    const deleteCar = useCallback((id) => {
        setCars(
            //returns all cars where car.id != id is true
            cars.filter(car => car.id !== id)
        )
        init()
    }, [cars, init])

    const replaceCar = useCallback((car) => {
        console.log("running replace car")
        const newCars = cars.concat();
        const indexToReplace = newCars.findIndex(c => c.id === car.id)
        newCars[indexToReplace] = car
        setCars(
            newCars
        )
        init()

    }, [cars, init])

    const editCar = useCallback((id) => {
        setEditCarID(id)
    }, [])

    const cancelCar = useCallback(() => {
        init()
    }, [init])

    return(
        <>
            <ToolHeader headerText="header string"/>
            <CarTable cars={cars} editCarId={editCarId} onDeleteCar={deleteCar} 
            onEditCar={editCar} onSaveCar={replaceCar}  onCancelCar={cancelCar} 
            initialState={initialState}/>  

            <Form buttonText="add" onAddCar={addCar} initialState={initialState}
            ref={defaultInputRef}/>
        </>
    )
}; 